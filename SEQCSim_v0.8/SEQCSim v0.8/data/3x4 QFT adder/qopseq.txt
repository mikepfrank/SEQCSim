qopseq.txt format version 1
operations: 40

comment: 	This algorithm assumes there are three 4-bit registers a, b, c.
comment: 	It computes c += a + b (interpreting the registers as binary 
comment: 	integers) using a highly nonclassical approach.  

comment: 	This circuit is from the thesis "Toward an architecture for
comment: 	quantum programming," by Stefano Bettelli, 2/18/2002, p. 42.

comment: -------- Quantum Fourier Transform on addend register c ------------

operation #0: apply unary operator H to bits c[3]
operation #1: apply binary operator cPiOver2 to bits c[3], c[2]
operation #2: apply binary operator cPiOver4 to bits c[3], c[1]
operation #3: apply binary operator cPiOver8 to bits c[3], c[0]

operation #4: apply unary operator H to bits c[2]
operation #5: apply binary operator cPiOver2 to bits c[2], c[1]
operation #6: apply binary operator cPiOver4 to bits c[2], c[0]

operation #7: apply unary operator H to bits c[1]
operation #8: apply binary operator cPiOver2 to bits c[1], c[0]

operation #9: apply unary operator H to bits c[0]

comment: -------- Add phase corresponding to addend b --------------

operation #10: apply binary operator cZ to bits b[3], c[3]
operation #11: apply binary operator cZ to bits b[2], c[2]
operation #12: apply binary operator cZ to bits b[1], c[1]
operation #13: apply binary operator cZ to bits b[0], c[0]

operation #14: apply binary operator cPiOver2 to bits b[2], c[3]
operation #15: apply binary operator cPiOver2 to bits b[1], c[2]
operation #16: apply binary operator cPiOver2 to bits b[0], c[1]

operation #17: apply binary operator cPiOver4 to bits b[1], c[3]
operation #18: apply binary operator cPiOver4 to bits b[0], c[2]

operation #19: apply binary operator cPiOver8 to bits b[0], c[3]

comment: -------- Add phase corresponding to addend a --------------

operation #20: apply binary operator cZ to bits a[3], c[3]
operation #21: apply binary operator cZ to bits a[2], c[2]
operation #22: apply binary operator cZ to bits a[1], c[1]
operation #23: apply binary operator cZ to bits a[0], c[0]

operation #24: apply binary operator cPiOver2 to bits a[2], c[3]
operation #25: apply binary operator cPiOver2 to bits a[1], c[2]
operation #26: apply binary operator cPiOver2 to bits a[0], c[1]

operation #27: apply binary operator cPiOver4 to bits a[1], c[3]
operation #28: apply binary operator cPiOver4 to bits a[0], c[2]

operation #29: apply binary operator cPiOver8 to bits a[0], c[3]

comment: -------- Inverse Quantum Fourier Transform on addend register c ------------

operation #30: apply unary operator H to bits c[0]

operation #31: apply binary operator inv_cPiOver2 to bits c[1], c[0]
operation #32: apply unary operator H to bits c[1]

operation #33: apply binary operator inv_cPiOver4 to bits c[2], c[0]
operation #34: apply binary operator inv_cPiOver2 to bits c[2], c[1]
operation #35: apply unary operator H to bits c[2]

operation #36: apply binary operator inv_cPiOver8 to bits c[3], c[0]
operation #37: apply binary operator inv_cPiOver4 to bits c[3], c[1]
operation #38: apply binary operator inv_cPiOver2 to bits c[3], c[2]
operation #39: apply unary operator H to bits c[3]
